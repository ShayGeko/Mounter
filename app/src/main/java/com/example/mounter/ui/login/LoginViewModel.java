package com.example.mounter.ui.login;

import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;
import androidx.lifecycle.ViewModel;

import android.util.Patterns;

import com.example.mounter.R;

import java.util.concurrent.atomic.AtomicReference;

import io.realm.mongodb.Credentials;
import io.realm.mongodb.User;

import static com.example.mounter.Mounter.mounter;


/* class partially autogenerated by AndroidStudio
*   handles :
*       form validation (autogenerated part)
*       user authentication (hand-written)
* */
public class LoginViewModel extends ViewModel {

    private MutableLiveData<LoginFormState> loginFormState = new MutableLiveData<>();
    private MutableLiveData<LoginResult> loginResult = new MutableLiveData<>();

    public LoginViewModel() { }

    /**
     *
     * @return LiveData<LoginFormState>
     */
    LiveData<LoginFormState> getLoginFormState() {
        return loginFormState;
    }

    /**
     *
     * @return LiveData<LoginResult>
     */
    LiveData<LoginResult> getLoginResult() {
        return loginResult;
    }

    /**
     * logs in the user based on the given credentials
     * @param email  user email
     * @param password  user password
     */
    public void login(String email, String password) {
        try {
            Credentials emailPasswordCredentials = Credentials.emailPassword(email, password);
            // log into the Realm using given credentials
            // mounter.currentUser() gets updated automatically on success
            // and can be used by other activities
            mounter.loginAsync(emailPasswordCredentials, it -> {
                if (it.isSuccess()) {
                    loginResult.setValue(LoginResult.Success);
                } else {
                    loginResult.setValue(LoginResult.Failure);
                }
            });

        } catch (Exception e) {
            loginResult.setValue(LoginResult.Failure);
        }
    }

    /**
     * subroutine that validates the form
     * can be removed without harming the auth logic
     * @param username
     * @param password
     */
    public void loginDataChanged(String username, String password) {
        if (!isUserNameValid(username)) {
            loginFormState.setValue(new LoginFormState(R.string.invalid_username, null));
        } else if (!isPasswordValid(password)) {
            loginFormState.setValue(new LoginFormState(null, R.string.invalid_password));
        } else {
            loginFormState.setValue(new LoginFormState(true));
        }
    }

    // A placeholder username validation check
    private boolean isUserNameValid(String username) {
        if (username == null) {
            return false;
        }
        if (username.contains("@")) {
            return Patterns.EMAIL_ADDRESS.matcher(username).matches();
        } else {
            return !username.trim().isEmpty();
        }
    }

    // A placeholder password validation check
    private boolean isPasswordValid(String password) {
        return password != null && password.trim().length() > 5;
    }
}